{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "52493e08",
   "metadata": {},
   "source": [
    "<h1 style='text-align: center;'> Independent Natural Language Processing Project 2 </h1> \n",
    "<h3 style='text-align: center;'> By Sri Das </h3>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "06a760f3",
   "metadata": {},
   "source": [
    "<h2 style='text-align: center;'> Twitter data classification </h2>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "16cb0e13",
   "metadata": {},
   "source": [
    "### Importing packages"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "0f9427a5",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Generic \n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "dd1cc385",
   "metadata": {},
   "outputs": [],
   "source": [
    "# NLP packages\n",
    "\n",
    "import re, string\n",
    "import nltk\n",
    "from nltk.corpus import stopwords\n",
    "from nltk.tokenize import word_tokenize\n",
    "from nltk.stem import SnowballStemmer\n",
    "from nltk.corpus import wordnet\n",
    "from nltk.stem import WordNetLemmatizer\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "9332ca8b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Modeling related packages\n",
    "\n",
    "from sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV, RandomizedSearchCV\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.naive_bayes import MultinomialNB\n",
    "from sklearn.metrics import classification_report, f1_score, accuracy_score, confusion_matrix\n",
    "from sklearn.metrics import roc_curve, auc, roc_auc_score, precision_score, recall_score \n",
    "from sklearn.pipeline import Pipeline\n",
    "from imblearn.pipeline import make_pipeline\n",
    "from imblearn.over_sampling import ADASYN, SMOTE, RandomOverSampler\n",
    "from imblearn.under_sampling import RandomUnderSampler\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "import xgboost as xgb"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "16fb5d70",
   "metadata": {},
   "source": [
    "### Loading and exploring data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "7a64aff2",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = pd.read_csv('tweet_data.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "5986658e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tweetID</th>\n",
       "      <th>crDate</th>\n",
       "      <th>edInput</th>\n",
       "      <th>editor</th>\n",
       "      <th>engages</th>\n",
       "      <th>isApproved</th>\n",
       "      <th>isEdNeed</th>\n",
       "      <th>isRT</th>\n",
       "      <th>likes</th>\n",
       "      <th>photoUrl</th>\n",
       "      <th>retweets</th>\n",
       "      <th>rtUsID</th>\n",
       "      <th>text</th>\n",
       "      <th>topicName</th>\n",
       "      <th>usFlwrs</th>\n",
       "      <th>usID</th>\n",
       "      <th>usName</th>\n",
       "      <th>videoUrl</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1070867471245164544</td>\n",
       "      <td>2018-12-07 02:27:55</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>98</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>64</td>\n",
       "      <td>https://pbs.twimg.com/media/Dtx8SiIWkAImVsb.jpg</td>\n",
       "      <td>34</td>\n",
       "      <td>-1</td>\n",
       "      <td>The immediate impulse for an alliance of the E...</td>\n",
       "      <td>Business</td>\n",
       "      <td>23464532</td>\n",
       "      <td>5988062</td>\n",
       "      <td>The Economist</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1070868017888837633</td>\n",
       "      <td>2018-12-07 02:30:05</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>13</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>10</td>\n",
       "      <td>https://pbs.twimg.com/media/Dtx8yTyW4AEciqP.jpg</td>\n",
       "      <td>3</td>\n",
       "      <td>-1</td>\n",
       "      <td>America's economy is flashing some warning sig...</td>\n",
       "      <td>Business</td>\n",
       "      <td>1732809</td>\n",
       "      <td>16184358</td>\n",
       "      <td>CNN Business</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1070868012864028673</td>\n",
       "      <td>2018-12-07 02:30:04</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>12</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>8</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4</td>\n",
       "      <td>-1</td>\n",
       "      <td>Lyft files for what is expected to be one of t...</td>\n",
       "      <td>Business</td>\n",
       "      <td>2253989</td>\n",
       "      <td>25053299</td>\n",
       "      <td>FORTUNE</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1070867995239555075</td>\n",
       "      <td>2018-12-07 02:30:00</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>5</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>4</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>Exporters still waiting to get Rs 6,000 crore ...</td>\n",
       "      <td>Business</td>\n",
       "      <td>1704056</td>\n",
       "      <td>43855487</td>\n",
       "      <td>Business Standard</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1070867995205885952</td>\n",
       "      <td>2018-12-07 02:30:00</td>\n",
       "      <td>-1</td>\n",
       "      <td>-1</td>\n",
       "      <td>5</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>3</td>\n",
       "      <td>-1</td>\n",
       "      <td>Ride-hailing firm Lyft races to leave Uber beh...</td>\n",
       "      <td>Business</td>\n",
       "      <td>1997662</td>\n",
       "      <td>15110357</td>\n",
       "      <td>Reuters Business</td>\n",
       "      <td>https://video.twimg.com/amplify_video/10708116...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               tweetID               crDate  edInput  editor  engages  \\\n",
       "0  1070867471245164544  2018-12-07 02:27:55       -1      -1       98   \n",
       "1  1070868017888837633  2018-12-07 02:30:05       -1      -1       13   \n",
       "2  1070868012864028673  2018-12-07 02:30:04       -1      -1       12   \n",
       "3  1070867995239555075  2018-12-07 02:30:00       -1      -1        5   \n",
       "4  1070867995205885952  2018-12-07 02:30:00       -1      -1        5   \n",
       "\n",
       "   isApproved  isEdNeed   isRT  likes  \\\n",
       "0       False      True  False     64   \n",
       "1       False      True  False     10   \n",
       "2       False      True  False      8   \n",
       "3       False      True  False      4   \n",
       "4       False      True  False      2   \n",
       "\n",
       "                                          photoUrl  retweets  rtUsID  \\\n",
       "0  https://pbs.twimg.com/media/Dtx8SiIWkAImVsb.jpg        34      -1   \n",
       "1  https://pbs.twimg.com/media/Dtx8yTyW4AEciqP.jpg         3      -1   \n",
       "2                                              NaN         4      -1   \n",
       "3                                              NaN         1      -1   \n",
       "4                                              NaN         3      -1   \n",
       "\n",
       "                                                text topicName   usFlwrs  \\\n",
       "0  The immediate impulse for an alliance of the E...  Business  23464532   \n",
       "1  America's economy is flashing some warning sig...  Business   1732809   \n",
       "2  Lyft files for what is expected to be one of t...  Business   2253989   \n",
       "3  Exporters still waiting to get Rs 6,000 crore ...  Business   1704056   \n",
       "4  Ride-hailing firm Lyft races to leave Uber beh...  Business   1997662   \n",
       "\n",
       "       usID             usName  \\\n",
       "0   5988062      The Economist   \n",
       "1  16184358       CNN Business   \n",
       "2  25053299            FORTUNE   \n",
       "3  43855487  Business Standard   \n",
       "4  15110357   Reuters Business   \n",
       "\n",
       "                                            videoUrl  \n",
       "0                                                NaN  \n",
       "1                                                NaN  \n",
       "2                                                NaN  \n",
       "3                                                NaN  \n",
       "4  https://video.twimg.com/amplify_video/10708116...  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "f51647ff",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(785916, 18)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7ce63df5",
   "metadata": {},
   "source": [
    "Checking and removing null values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "b17c7c8c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "tweetID            0\n",
       "crDate             0\n",
       "edInput            0\n",
       "editor             0\n",
       "engages            0\n",
       "isApproved         0\n",
       "isEdNeed           0\n",
       "isRT               0\n",
       "likes              0\n",
       "photoUrl      508020\n",
       "retweets           0\n",
       "rtUsID             0\n",
       "text               0\n",
       "topicName          0\n",
       "usFlwrs            0\n",
       "usID               0\n",
       "usName             0\n",
       "videoUrl      645425\n",
       "dtype: int64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.isna().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b859c05f",
   "metadata": {},
   "source": [
    "Most entries of features 'photourl' and 'videourl' are null values, so removing these columns from the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "69b02b66",
   "metadata": {},
   "outputs": [],
   "source": [
    "data.dropna(axis='columns', inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cc752d98",
   "metadata": {},
   "source": [
    "The description of data mentioned that a value of 1 for 'edInput' indicate correct classification of the data and 'edInput' value of 2 is incorrect classification of the data. The data is selected based on these two values for 'edInput' for 'Business' tweets. These two values of 'edInput' become the two classes. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "22820303",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1    17836\n",
       "2    12188\n",
       "Name: edInput, dtype: int64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_1 = (data[data['topicName'] == 'Business']).copy(deep=True)\n",
    "data_1 =(data_1[(data_1['edInput']==1) | (data_1['edInput']==2)]).copy(deep=True)\n",
    "data_1.reset_index(drop=True, inplace=True)\n",
    "data_1['edInput'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5aeeca48",
   "metadata": {},
   "source": [
    "A new variable 'target' is defined with a value 1 for correct classification of the tweets ('edInput' = 1) and 0 for the wrong classification ('edInput' = 0). "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "089befc4",
   "metadata": {},
   "outputs": [],
   "source": [
    "data_1['target'] = 0\n",
    "data_1.loc[data_1.edInput == 1, 'target'] = 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "1419384c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The number of tweets correctly classified as 'Business' are 17836 and wrongly classified are 12188\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plotting the target values \n",
    "\n",
    "tar = data_1['target'].value_counts()\n",
    "plt.figure(figsize = (12, 7))\n",
    "plt.title('Value counts of target variable')\n",
    "sns.barplot(x=tar.index, y=tar)\n",
    "plt.xticks(rotation=90);\n",
    "\n",
    "print(\"The number of tweets correctly classified as 'Business' are {} and wrongly classified are {}\".format(tar[1], tar[0]))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1043ddc5",
   "metadata": {},
   "source": [
    "The above figure shows that more business tweets are classified correctly"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "149a35cd",
   "metadata": {},
   "source": [
    "#### Word count of the tweets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "eee62532",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Average word count of target value 1: 17.898912312177618\n",
      "Average word count of target vallue 0: 17.262143091565473\n"
     ]
    }
   ],
   "source": [
    "data_1['word_count'] = data_1['text'].apply(lambda x: len(str(x).split()))\n",
    "print('Average word count of target value 1:', data_1.loc[data_1.target==1]['word_count'].mean()) \n",
    "print('Average word count of target vallue 0:',data_1.loc[data_1.target ==0]['word_count'].mean())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "87f86181",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plotting word count of both classes\n",
    "\n",
    "fig,(ax1,ax2)=plt.subplots(1,2,figsize=(10,4))\n",
    "bus_words=data_1[data_1['target']==1]['word_count']\n",
    "ax1.hist(bus_words,color='red')\n",
    "ax1.set_title('Correctly classified tweets')\n",
    "nbus_words=data_1[data_1['target']==0]['word_count']\n",
    "ax2.hist(nbus_words,color='green')\n",
    "ax2.set_title('Wrongly classified tweets')\n",
    "fig.suptitle('Words per tweet')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "13ddc111",
   "metadata": {},
   "source": [
    "#### Character count of the tweets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "6d9bd142",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Average character count in Business tweets: 127.58662256111236\n",
      "Average character count in Non-business tweets: 122.67812602559896\n"
     ]
    }
   ],
   "source": [
    "data_1['char_count'] = data_1['text'].apply(lambda x: len(str(x)))\n",
    "print('Average character count in Business tweets:',data_1[data_1['target']==1]['char_count'].mean()) \n",
    "print('Average character count in Non-business tweets:', data_1[data_1['target']==0]['char_count'].mean()) #Non-Business tweets"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a712566d",
   "metadata": {},
   "source": [
    "The average word and character count for both classes are almost the same. Let's look at the box plot of the character count of the tweets. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "f3f05a63",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Box plot of the character counts\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(5, 5))\n",
    "plt.boxplot(data_1.char_count)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c9da6908",
   "metadata": {},
   "source": [
    "As we can see from above results of character count, there are numerous outliers. Although the tweets have a limit of 140 characters, we can see there are many tweets with higher character counts. It is time to clean the tweet text. The below function 'text_clean' is used to remove any hyperlinks, punctuation and numbers from tweet text."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "4b986643",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Function to clean the text \n",
    "def text_clean(text) :\n",
    "    text = text.lower() \n",
    "    text = re.sub(r'http\\S+', '', text) \n",
    "    text = re.sub(r'([^a-zA-Z\\s]+?)', ' ', text) \n",
    "    text = re.sub(' +', ' ', text)\n",
    "    text_clean = ' '.join( [w for w in text.split() if len(w)>1] )\n",
    "    return text_clean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "1cfe6dc9",
   "metadata": {},
   "outputs": [],
   "source": [
    "data_1['clean_text'] = data_1['text'].apply(text_clean)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "04206c73",
   "metadata": {},
   "source": [
    "### Vectorization"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "920afa68",
   "metadata": {},
   "source": [
    "After the initial cleaning of the text, we move on to the next step of converting this text data into a format that can fed to the Machine learning algorithms, this process is called vectorization. Here two vectorization techniques, countvectorizer and TFIDF vectorizer are used."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "0ef98c40",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Finding the size of the vocabulary\n",
    "vocab = []\n",
    "for doc in data_1.clean_text:\n",
    "    for word in doc.split():\n",
    "        if word not in vocab:\n",
    "            vocab.append(word)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "70361ed8",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Size of Vocabulary : 24070\n"
     ]
    }
   ],
   "source": [
    "print('Size of Vocabulary :', len(vocab))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "c1bf2f9f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Splitting data into train and test\n",
    "\n",
    "X = data_1['clean_text']\n",
    "y = data_1['target']\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X,y , test_size=0.2, stratify=y)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "685f94da",
   "metadata": {},
   "source": [
    "#### Count vectorization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "b9968e70",
   "metadata": {},
   "outputs": [],
   "source": [
    "cvec = CountVectorizer()\n",
    "\n",
    "X_train_cvec = cvec.fit_transform(X_train)\n",
    "\n",
    "X_test_cvec = cvec.transform(X_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bc12c089",
   "metadata": {},
   "source": [
    "#### TFIDF vectorization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "5d9b2858",
   "metadata": {},
   "outputs": [],
   "source": [
    "tfidf_vect = TfidfVectorizer(use_idf=True)\n",
    "X_train_vect_tfidf = tfidf_vect.fit_transform(X_train) \n",
    "X_test_vect_tfidf = tfidf_vect.transform(X_test)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "784333a1",
   "metadata": {},
   "source": [
    "### Baseline model - Logistic Regression"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6bdb783b",
   "metadata": {},
   "source": [
    "#### Null accuracy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "2fcd52e0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1    3567\n",
      "0    2438\n",
      "Name: target, dtype: int64\n",
      "Null accuracy : 0.5940049958368027\n"
     ]
    }
   ],
   "source": [
    "print(y_test.value_counts())\n",
    "print('Null accuracy :', y_test.value_counts()[1]/(y_test.value_counts()[0] + y_test.value_counts()[1]))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fb912b91",
   "metadata": {},
   "source": [
    "I have used Logistic Regression as the baseline model because of its simplicity, it is also linear and scalable to large data. Given the data is imbalanced 'accuracy' alone is not a good measure of performance. Hence other metrics such as precision, recall and confusion matrix are used to evaluate the model function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "4dfa53ec",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Function for logistic regression and performance metrics\n",
    "\n",
    "def log_reg (X_train_vec, y_train, X_test_vec, y_test):\n",
    "    lr_tfidf=LogisticRegression(class_weight='balanced', max_iter=1000)\n",
    "    lr_tfidf.fit(X_train_vec, y_train) \n",
    "\n",
    "    #Predict y value for test dataset\n",
    "    y_predict = lr_tfidf.predict(X_test_vec)\n",
    "    y_prob = lr_tfidf.predict_proba(X_test_vec)[:,1]\n",
    "\n",
    "    print(classification_report(y_test,y_predict))\n",
    "    print('Confusion Matrix:\\n',confusion_matrix(y_test, y_predict))\n",
    " \n",
    "    fpr, tpr, thresholds = roc_curve(y_test, y_prob)\n",
    "    roc_auc = auc(fpr, tpr)\n",
    "    print('\\nAUC:', roc_auc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "31dd74d2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.75      0.79      0.77      2438\n",
      "           1       0.85      0.82      0.83      3567\n",
      "\n",
      "    accuracy                           0.80      6005\n",
      "   macro avg       0.80      0.80      0.80      6005\n",
      "weighted avg       0.81      0.80      0.81      6005\n",
      "\n",
      "Confusion Matrix:\n",
      " [[1915  523]\n",
      " [ 650 2917]]\n",
      "\n",
      "AUC: 0.8807699233678146\n"
     ]
    }
   ],
   "source": [
    "# Baseline model on data after count vectorization\n",
    "log_reg(X_train_cvec, y_train, X_test_cvec, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "d0200c9e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.74      0.80      0.77      2438\n",
      "           1       0.86      0.81      0.83      3567\n",
      "\n",
      "    accuracy                           0.81      6005\n",
      "   macro avg       0.80      0.81      0.80      6005\n",
      "weighted avg       0.81      0.81      0.81      6005\n",
      "\n",
      "Confusion Matrix:\n",
      " [[1957  481]\n",
      " [ 671 2896]]\n",
      "\n",
      "AUC: 0.8867074746106008\n"
     ]
    }
   ],
   "source": [
    "# Baseline model on data after tfidf vectorization\n",
    "log_reg(X_train_vect_tfidf, y_train, X_test_vect_tfidf, y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aed9aff4",
   "metadata": {},
   "source": [
    "Based on the above results, it can be seen that TFIDF shows a marginal improvement in the model performance both in terms of accuracy and precision. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "073e3b57",
   "metadata": {},
   "source": [
    "### Factors affecting the model performance"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7f785d2b",
   "metadata": {},
   "source": [
    "The affect of different factors such as stopwords, n-grams, stemming and lemmatization on the performance of the base model is evaluated."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "847b80c5",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Functions to caluculate accuracy wrt performance factors\n",
    "\n",
    "def accu_summ(pipeline, X_train, y_train, X_test, y_test):\n",
    "    accu_fit = pipeline.fit(X_train, y_train)\n",
    "    y_pred = accu_fit.predict(X_test)\n",
    "    accuracy = accuracy_score(y_test, y_pred)\n",
    "    #print(classification_report(y_test,y_pred))\n",
    "    return accuracy \n",
    "\n",
    "tfidf = TfidfVectorizer(use_idf=True)\n",
    "lr = LogisticRegression(class_weight='balanced')\n",
    "n_features = np.arange(1000,30000,5000)\n",
    "\n",
    "\n",
    "def nfeat_accu_finder(vectorizer=tfidf, n_features=n_features, stop_words=None, ngram_range=(1, 1), classifier=lr):\n",
    "    result = []\n",
    "    for n in n_features:\n",
    "        vectorizer.set_params(stop_words=stop_words, max_features=n, ngram_range=ngram_range)\n",
    "        finder_pipeline = Pipeline([('vectorizer', vectorizer),('classifier', classifier)])\n",
    "       # print(\"Performance metrics {} features\".format(n))\n",
    "        nfeature_accuracy = accu_summ(finder_pipeline, X_train, y_train, X_test, y_test)\n",
    "        result.append((n,nfeature_accuracy))\n",
    "    return result"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "128c45d6",
   "metadata": {},
   "source": [
    "#### Stopwords"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4764753e",
   "metadata": {},
   "source": [
    "First we will look at how the inclusion and removal of stopwords affect the accuracy/performance of the model. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "fe932644",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Feature analysis with stopwords removal\n",
    "stpwrds = stopwords.words('english')\n",
    "feat_wosw = nfeat_accu_finder(stop_words=stpwrds)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "c0b75816",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Feature analysis with stopwords\n",
    "feat_wsw = nfeat_accu_finder()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "dbc98ace",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "nfeat_plot_wosw = pd.DataFrame(feat_wosw,columns=['nfeat','val_accu'])\n",
    "nfeat_plot_wsw = pd.DataFrame(feat_wsw,columns=['nfeat','val_accu'])\n",
    "plt.figure(figsize=(8,6))\n",
    "plt.plot(nfeat_plot_wosw.nfeat, nfeat_plot_wosw.val_accu, label='without stop words')\n",
    "plt.plot(nfeat_plot_wsw.nfeat, nfeat_plot_wsw.val_accu,label='with stop words')\n",
    "plt.title(\"Without stop words VS With stop words : Accuracy\")\n",
    "plt.xlabel(\"Number of features\")\n",
    "plt.ylabel(\"Accuracy\")\n",
    "plt.legend();"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "775e6c9d",
   "metadata": {},
   "source": [
    "The accuracy is marginally better without stopwords, for about 5000 value of 'max_features'. Beyond that, with feature values the accuracy without stop words improves more than accuracy with stop words"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "247a518e",
   "metadata": {},
   "source": [
    "#### n-gram "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7fac67f6",
   "metadata": {},
   "source": [
    "In the previous section the analysis was performed with unigram, in this section the performance of the model is calculated for bigram and trigram."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "c7789032",
   "metadata": {},
   "outputs": [],
   "source": [
    "feat_bg = nfeat_accu_finder(ngram_range=(1, 2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "7940142d",
   "metadata": {},
   "outputs": [],
   "source": [
    "feat_tg = nfeat_accu_finder(ngram_range=(1, 3)) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "f73bcc96",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "nfeat_plot_tg = pd.DataFrame(feat_tg,columns=['nfeat','val_accu'])\n",
    "nfeat_plot_bg = pd.DataFrame(feat_bg,columns=['nfeat','val_accu'])\n",
    "nfeat_plot_ug = pd.DataFrame(feat_wsw,columns=['nfeat','val_accu'])\n",
    "plt.figure(figsize=(12,10))\n",
    "plt.plot(nfeat_plot_tg.nfeat, nfeat_plot_tg.val_accu,label='trigram')\n",
    "plt.plot(nfeat_plot_bg.nfeat, nfeat_plot_bg.val_accu,label='bigram')\n",
    "plt.plot(nfeat_plot_ug.nfeat, nfeat_plot_ug.val_accu, label='unigram')\n",
    "\n",
    "plt.title(\"N-gram (with softwords) test result : Accuracy\")\n",
    "plt.xlabel(\"Number of features\")\n",
    "plt.ylabel(\"Validation set accuracy\")\n",
    "plt.legend();"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "562cbd7c",
   "metadata": {},
   "source": [
    "The unigram gave better accuracy than bigram and trigram, while applied on baseline model"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6ebe174e",
   "metadata": {},
   "source": [
    "#### Stemming"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "eb844490",
   "metadata": {},
   "outputs": [],
   "source": [
    "stemmer = SnowballStemmer(\"english\")\n",
    "\n",
    "def stem(text):\n",
    "    words = text.split()\n",
    "    stems = [stemmer.stem(t) for t in words]\n",
    "    return \" \".join(stems)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "bbc9835d",
   "metadata": {},
   "outputs": [],
   "source": [
    "data_1['text_stem'] = data_1.clean_text.apply(stem)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "dc327be4",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_stem, y_stem = data_1['text_stem'], data_1['target']\n",
    "X_train_stem, X_test_stem, y_train_stem, y_test_stem = train_test_split(X_stem, y_stem , test_size=0.2, stratify=y_stem)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "65ca5c29",
   "metadata": {},
   "outputs": [],
   "source": [
    "stem_vect = TfidfVectorizer(use_idf=True)\n",
    "X_train_vec_stem = stem_vect.fit_transform(X_train_stem) \n",
    "X_test_vec_stem = stem_vect.transform(X_test_stem)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "47bfcb63",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.73      0.82      0.77      2438\n",
      "           1       0.87      0.79      0.83      3567\n",
      "\n",
      "    accuracy                           0.80      6005\n",
      "   macro avg       0.80      0.81      0.80      6005\n",
      "weighted avg       0.81      0.80      0.80      6005\n",
      "\n",
      "Confusion Matrix:\n",
      " [[2007  431]\n",
      " [ 757 2810]]\n",
      "\n",
      "AUC: 0.8866915483813547\n"
     ]
    }
   ],
   "source": [
    "log_reg(X_train_vec_stem, y_train_stem, X_test_vec_stem, y_test_stem)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d5c063da",
   "metadata": {},
   "source": [
    "There is no remarkable improvement in the performance metrics with stemming compared to baseline model"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b1b30f1e",
   "metadata": {},
   "source": [
    "#### Lemmatization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "576ff538",
   "metadata": {},
   "outputs": [],
   "source": [
    "wl = WordNetLemmatizer()\n",
    "\n",
    "# Function to map NTLK position tags\n",
    "def wordnet_pos(tag):\n",
    "    if tag.startswith('J'):\n",
    "        return wordnet.ADJ\n",
    "    elif tag.startswith('V'):\n",
    "        return wordnet.VERB\n",
    "    elif tag.startswith('N'):\n",
    "        return wordnet.NOUN\n",
    "    elif tag.startswith('R'):\n",
    "        return wordnet.ADV\n",
    "    else:\n",
    "        return wordnet.NOUN\n",
    "    \n",
    "def lemma(text):\n",
    "    words = text.split()\n",
    "    word_pos_tags = nltk.pos_tag(words) \n",
    "    a=[wl.lemmatize(tag[0], wordnet_pos(tag[1])) for idx, tag in enumerate(word_pos_tags)] \n",
    "    return \" \".join(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "77c2221b",
   "metadata": {},
   "outputs": [],
   "source": [
    "data_1['text_lemm'] = data_1.clean_text.apply(lemma)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "cc4c8868",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_lem, y_lem = data_1['text_lemm'], data_1['target']\n",
    "X_train_lem, X_test_lem, y_train_lem, y_test_lem = train_test_split(X_lem,y_lem , test_size=0.2, stratify=y_lem)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "68c81109",
   "metadata": {},
   "outputs": [],
   "source": [
    "lemm_vect = TfidfVectorizer(use_idf=True)\n",
    "X_train_vectors_lemm = lemm_vect.fit_transform(X_train_lem) \n",
    "X_test_vectors_lemm = lemm_vect.transform(X_test_lem)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "11569570",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.74      0.82      0.78      2438\n",
      "           1       0.87      0.81      0.84      3567\n",
      "\n",
      "    accuracy                           0.81      6005\n",
      "   macro avg       0.81      0.82      0.81      6005\n",
      "weighted avg       0.82      0.81      0.81      6005\n",
      "\n",
      "Confusion Matrix:\n",
      " [[2006  432]\n",
      " [ 687 2880]]\n",
      "\n",
      "AUC: 0.8917817897309975\n"
     ]
    }
   ],
   "source": [
    "log_reg(X_train_vectors_lemm, y_train_lem, X_test_vectors_lemm, y_test_lem)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aeba7261",
   "metadata": {},
   "source": [
    "Lemmatization of the words of the data also does not improve the performance much compared to the baseline model. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7b6784cf",
   "metadata": {},
   "source": [
    "### Modeling"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "221b9a8c",
   "metadata": {},
   "source": [
    "Apart from the logistic regression as baseline classifier, two other classifiers, Random forest classifier and Extreme gradient boosting classifiers are applied in this section. The performance of these models is evaluated on the vectorized data and results are compared. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aa9e8b55",
   "metadata": {},
   "source": [
    "#### Random Forest Classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "dd997d0c",
   "metadata": {},
   "outputs": [],
   "source": [
    "rfc = RandomForestClassifier()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "0a60b49f",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestClassifier()"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rfc.fit(X_train_vect_tfidf, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "bfac74b7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.77      0.66      0.71      2438\n",
      "           1       0.79      0.87      0.83      3567\n",
      "\n",
      "    accuracy                           0.78      6005\n",
      "   macro avg       0.78      0.76      0.77      6005\n",
      "weighted avg       0.78      0.78      0.78      6005\n",
      "\n",
      "Confusion Matrix:\n",
      " [[1614  824]\n",
      " [ 471 3096]]\n",
      "\n",
      "AUC: 0.8596331723691766\n"
     ]
    }
   ],
   "source": [
    "rfc_pred = rfc.predict(X_test_vect_tfidf)\n",
    "y_prob_rfc = rfc.predict_proba(X_test_vect_tfidf)[:,1]\n",
    "\n",
    "\n",
    "print(classification_report(y_test,rfc_pred))\n",
    "print('Confusion Matrix:\\n',confusion_matrix(y_test, rfc_pred))\n",
    " \n",
    "fpr, tpr, thresholds = roc_curve(y_test, y_prob_rfc)\n",
    "roc_auc = auc(fpr, tpr)\n",
    "print('\\nAUC:', roc_auc)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cfbec893",
   "metadata": {},
   "source": [
    "#### Extreme Gradient Boosting Classifier "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "6315c518",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "XGBClassifier(base_score=None, booster=None, callbacks=None,\n",
       "              colsample_bylevel=None, colsample_bynode=None,\n",
       "              colsample_bytree=None, early_stopping_rounds=None,\n",
       "              enable_categorical=False, eval_metric='logloss',\n",
       "              feature_types=None, gamma=None, gpu_id=None, grow_policy=None,\n",
       "              importance_type=None, interaction_constraints=None,\n",
       "              learning_rate=None, max_bin=None, max_cat_threshold=None,\n",
       "              max_cat_to_onehot=None, max_delta_step=None, max_depth=None,\n",
       "              max_leaves=None, min_child_weight=None, missing=nan,\n",
       "              monotone_constraints=None, n_estimators=100, n_jobs=None,\n",
       "              num_parallel_tree=None, predictor=None, random_state=None, ...)"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "xgboost = xgb.XGBClassifier(objective='binary:logistic', eval_metric='logloss')\n",
    "xgboost.fit(X_train_vect_tfidf, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "d6834963",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.74      0.66      0.70      2438\n",
      "           1       0.78      0.84      0.81      3567\n",
      "\n",
      "    accuracy                           0.77      6005\n",
      "   macro avg       0.76      0.75      0.75      6005\n",
      "weighted avg       0.76      0.77      0.76      6005\n",
      "\n",
      "Confusion Matrix:\n",
      " [[1615  823]\n",
      " [ 581 2986]]\n",
      "\n",
      "AUC: 0.8486806987670454\n"
     ]
    }
   ],
   "source": [
    "xgb_predict = xgboost.predict(X_test_vect_tfidf)\n",
    "y_xgb_prob = xgboost.predict_proba(X_test_vect_tfidf)[:,1]\n",
    "\n",
    "\n",
    "print(classification_report(y_test,xgb_predict))\n",
    "print('Confusion Matrix:\\n',confusion_matrix(y_test, xgb_predict))\n",
    " \n",
    "fpr, tpr, thresholds = roc_curve(y_test, y_xgb_prob)\n",
    "roc_auc = auc(fpr, tpr)\n",
    "print('\\nAUC:', roc_auc)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "382f99f4",
   "metadata": {},
   "source": [
    " Both Random forest classifier and Extreme gradient boosting classifier show diminished performance. All the performance metrics, precision, recall, accuracy and AUC are lower compared to Logistic Regression model. However, between the two models Random forest classifier is better than XGB classifier. Based on the analysis so far it can be concluded that Logistc Regression Classifier is the best choice for modeling the classification of tweets. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6fb4868e",
   "metadata": {},
   "source": [
    "### Hyperparameter tuning"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c4f0162a",
   "metadata": {},
   "source": [
    "As Logistic Regression has been identified as the best performing model for this data set. We will perform hyperparameter tuning using GridSearch CV to improve upon the performance of the baseline model "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "785b4680",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X,y , test_size=0.2, stratify=y) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "2172e34c",
   "metadata": {},
   "outputs": [],
   "source": [
    "tfidf = TfidfVectorizer()\n",
    "X_train_vectors_tfidf = tfidf.fit_transform(X_train) \n",
    "X_test_vectors_tfidf = tfidf.transform(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "5cdb8850",
   "metadata": {},
   "outputs": [],
   "source": [
    "classifier = LogisticRegression(class_weight='balanced', max_iter=2000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "89d17bd8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'C': 1.0,\n",
       " 'class_weight': 'balanced',\n",
       " 'dual': False,\n",
       " 'fit_intercept': True,\n",
       " 'intercept_scaling': 1,\n",
       " 'l1_ratio': None,\n",
       " 'max_iter': 2000,\n",
       " 'multi_class': 'auto',\n",
       " 'n_jobs': None,\n",
       " 'penalty': 'l2',\n",
       " 'random_state': None,\n",
       " 'solver': 'lbfgs',\n",
       " 'tol': 0.0001,\n",
       " 'verbose': 0,\n",
       " 'warm_start': False}"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "classifier.get_params()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "99e29a6e",
   "metadata": {},
   "outputs": [],
   "source": [
    "lr_params = {'penalty': ['l1','l2'],\n",
    "          'solver':['liblinear', 'sag'],\n",
    "          'C': np.logspace(-10,10,21)}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "033edbd8",
   "metadata": {},
   "outputs": [],
   "source": [
    "lr_model=GridSearchCV(classifier,param_grid=lr_params,\n",
    "                            scoring='accuracy',cv=5,verbose=3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "3d29777e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 84 candidates, totalling 420 fits\n",
      "[CV 1/5] END C=1e-10, penalty=l1, solver=liblinear;, score=0.406 total time=   0.0s\n",
      "[CV 2/5] END C=1e-10, penalty=l1, solver=liblinear;, score=0.406 total time=   0.0s\n",
      "[CV 3/5] END C=1e-10, penalty=l1, solver=liblinear;, score=0.406 total time=   0.0s\n",
      "[CV 4/5] END C=1e-10, penalty=l1, solver=liblinear;, score=0.406 total time=   0.0s\n",
      "[CV 5/5] END C=1e-10, penalty=l1, solver=liblinear;, score=0.406 total time=   0.0s\n",
      "[CV 1/5] END .....C=1e-10, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 2/5] END .....C=1e-10, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 3/5] END .....C=1e-10, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 4/5] END .....C=1e-10, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 5/5] END .....C=1e-10, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 1/5] END C=1e-10, penalty=l2, solver=liblinear;, score=0.741 total time=   0.0s\n",
      "[CV 2/5] END C=1e-10, penalty=l2, solver=liblinear;, score=0.729 total time=   0.0s\n",
      "[CV 3/5] END C=1e-10, penalty=l2, solver=liblinear;, score=0.736 total time=   0.0s\n",
      "[CV 4/5] END C=1e-10, penalty=l2, solver=liblinear;, score=0.737 total time=   0.0s\n",
      "[CV 5/5] END C=1e-10, penalty=l2, solver=liblinear;, score=0.728 total time=   0.0s\n",
      "[CV 1/5] END ...C=1e-10, penalty=l2, solver=sag;, score=0.594 total time=   6.1s\n",
      "[CV 2/5] END ...C=1e-10, penalty=l2, solver=sag;, score=0.594 total time=   6.7s\n",
      "[CV 3/5] END ...C=1e-10, penalty=l2, solver=sag;, score=0.406 total time=   6.2s\n",
      "[CV 4/5] END ...C=1e-10, penalty=l2, solver=sag;, score=0.594 total time=   6.8s\n",
      "[CV 5/5] END ...C=1e-10, penalty=l2, solver=sag;, score=0.594 total time=   6.1s\n",
      "[CV 1/5] END C=1e-09, penalty=l1, solver=liblinear;, score=0.406 total time=   0.0s\n",
      "[CV 2/5] END C=1e-09, penalty=l1, solver=liblinear;, score=0.406 total time=   0.0s\n",
      "[CV 3/5] END C=1e-09, penalty=l1, solver=liblinear;, score=0.406 total time=   0.0s\n",
      "[CV 4/5] END C=1e-09, penalty=l1, solver=liblinear;, score=0.406 total time=   0.0s\n",
      "[CV 5/5] END C=1e-09, penalty=l1, solver=liblinear;, score=0.406 total time=   0.0s\n",
      "[CV 1/5] END .....C=1e-09, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 2/5] END .....C=1e-09, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 3/5] END .....C=1e-09, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 4/5] END .....C=1e-09, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 5/5] END .....C=1e-09, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 1/5] END C=1e-09, penalty=l2, solver=liblinear;, score=0.741 total time=   0.0s\n",
      "[CV 2/5] END C=1e-09, penalty=l2, solver=liblinear;, score=0.729 total time=   0.0s\n",
      "[CV 3/5] END C=1e-09, penalty=l2, solver=liblinear;, score=0.736 total time=   0.0s\n",
      "[CV 4/5] END C=1e-09, penalty=l2, solver=liblinear;, score=0.737 total time=   0.0s\n",
      "[CV 5/5] END C=1e-09, penalty=l2, solver=liblinear;, score=0.728 total time=   0.0s\n",
      "[CV 1/5] END ...C=1e-09, penalty=l2, solver=sag;, score=0.594 total time=   6.2s\n",
      "[CV 2/5] END ...C=1e-09, penalty=l2, solver=sag;, score=0.594 total time=   6.7s\n",
      "[CV 3/5] END ...C=1e-09, penalty=l2, solver=sag;, score=0.594 total time=   6.8s\n",
      "[CV 4/5] END ...C=1e-09, penalty=l2, solver=sag;, score=0.406 total time=   8.0s\n",
      "[CV 5/5] END ...C=1e-09, penalty=l2, solver=sag;, score=0.406 total time=   8.0s\n",
      "[CV 1/5] END C=1e-08, penalty=l1, solver=liblinear;, score=0.406 total time=   0.0s\n",
      "[CV 2/5] END C=1e-08, penalty=l1, solver=liblinear;, score=0.406 total time=   0.0s\n",
      "[CV 3/5] END C=1e-08, penalty=l1, solver=liblinear;, score=0.406 total time=   0.0s\n",
      "[CV 4/5] END C=1e-08, penalty=l1, solver=liblinear;, score=0.406 total time=   0.0s\n",
      "[CV 5/5] END C=1e-08, penalty=l1, solver=liblinear;, score=0.406 total time=   0.0s\n",
      "[CV 1/5] END .....C=1e-08, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 2/5] END .....C=1e-08, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 3/5] END .....C=1e-08, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 4/5] END .....C=1e-08, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 5/5] END .....C=1e-08, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 1/5] END C=1e-08, penalty=l2, solver=liblinear;, score=0.741 total time=   0.0s\n",
      "[CV 2/5] END C=1e-08, penalty=l2, solver=liblinear;, score=0.729 total time=   0.0s\n",
      "[CV 3/5] END C=1e-08, penalty=l2, solver=liblinear;, score=0.736 total time=   0.0s\n",
      "[CV 4/5] END C=1e-08, penalty=l2, solver=liblinear;, score=0.737 total time=   0.0s\n",
      "[CV 5/5] END C=1e-08, penalty=l2, solver=liblinear;, score=0.728 total time=   0.0s\n",
      "[CV 1/5] END ...C=1e-08, penalty=l2, solver=sag;, score=0.406 total time=   4.1s\n",
      "[CV 2/5] END ...C=1e-08, penalty=l2, solver=sag;, score=0.406 total time=   4.6s\n",
      "[CV 3/5] END ...C=1e-08, penalty=l2, solver=sag;, score=0.406 total time=   3.7s\n",
      "[CV 4/5] END ...C=1e-08, penalty=l2, solver=sag;, score=0.594 total time=   5.0s\n",
      "[CV 5/5] END ...C=1e-08, penalty=l2, solver=sag;, score=0.594 total time=   4.5s\n",
      "[CV 1/5] END C=1e-07, penalty=l1, solver=liblinear;, score=0.406 total time=   0.0s\n",
      "[CV 2/5] END C=1e-07, penalty=l1, solver=liblinear;, score=0.406 total time=   0.0s\n",
      "[CV 3/5] END C=1e-07, penalty=l1, solver=liblinear;, score=0.406 total time=   0.0s\n",
      "[CV 4/5] END C=1e-07, penalty=l1, solver=liblinear;, score=0.406 total time=   0.0s\n",
      "[CV 5/5] END C=1e-07, penalty=l1, solver=liblinear;, score=0.406 total time=   0.0s\n",
      "[CV 1/5] END .....C=1e-07, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 2/5] END .....C=1e-07, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 3/5] END .....C=1e-07, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 4/5] END .....C=1e-07, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 5/5] END .....C=1e-07, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 1/5] END C=1e-07, penalty=l2, solver=liblinear;, score=0.741 total time=   0.0s\n",
      "[CV 2/5] END C=1e-07, penalty=l2, solver=liblinear;, score=0.729 total time=   0.0s\n",
      "[CV 3/5] END C=1e-07, penalty=l2, solver=liblinear;, score=0.736 total time=   0.0s\n",
      "[CV 4/5] END C=1e-07, penalty=l2, solver=liblinear;, score=0.737 total time=   0.0s\n",
      "[CV 5/5] END C=1e-07, penalty=l2, solver=liblinear;, score=0.728 total time=   0.0s\n",
      "[CV 1/5] END ...C=1e-07, penalty=l2, solver=sag;, score=0.594 total time=   9.5s\n",
      "[CV 2/5] END ...C=1e-07, penalty=l2, solver=sag;, score=0.406 total time=  11.6s\n",
      "[CV 3/5] END ...C=1e-07, penalty=l2, solver=sag;, score=0.594 total time=  10.3s\n",
      "[CV 4/5] END ...C=1e-07, penalty=l2, solver=sag;, score=0.406 total time=   6.7s\n",
      "[CV 5/5] END ...C=1e-07, penalty=l2, solver=sag;, score=0.594 total time=  12.4s\n",
      "[CV 1/5] END C=1e-06, penalty=l1, solver=liblinear;, score=0.406 total time=   0.0s\n",
      "[CV 2/5] END C=1e-06, penalty=l1, solver=liblinear;, score=0.406 total time=   0.0s\n",
      "[CV 3/5] END C=1e-06, penalty=l1, solver=liblinear;, score=0.406 total time=   0.0s\n",
      "[CV 4/5] END C=1e-06, penalty=l1, solver=liblinear;, score=0.406 total time=   0.0s\n",
      "[CV 5/5] END C=1e-06, penalty=l1, solver=liblinear;, score=0.406 total time=   0.0s\n",
      "[CV 1/5] END .....C=1e-06, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 2/5] END .....C=1e-06, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 3/5] END .....C=1e-06, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 4/5] END .....C=1e-06, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 5/5] END .....C=1e-06, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 1/5] END C=1e-06, penalty=l2, solver=liblinear;, score=0.741 total time=   0.0s\n",
      "[CV 2/5] END C=1e-06, penalty=l2, solver=liblinear;, score=0.730 total time=   0.0s\n",
      "[CV 3/5] END C=1e-06, penalty=l2, solver=liblinear;, score=0.736 total time=   0.0s\n",
      "[CV 4/5] END C=1e-06, penalty=l2, solver=liblinear;, score=0.738 total time=   0.0s\n",
      "[CV 5/5] END C=1e-06, penalty=l2, solver=liblinear;, score=0.728 total time=   0.0s\n",
      "[CV 1/5] END ...C=1e-06, penalty=l2, solver=sag;, score=0.448 total time=   4.3s\n",
      "[CV 2/5] END ...C=1e-06, penalty=l2, solver=sag;, score=0.407 total time=   3.2s\n",
      "[CV 3/5] END ...C=1e-06, penalty=l2, solver=sag;, score=0.455 total time=   4.2s\n",
      "[CV 4/5] END ...C=1e-06, penalty=l2, solver=sag;, score=0.597 total time=   3.2s\n",
      "[CV 5/5] END ...C=1e-06, penalty=l2, solver=sag;, score=0.624 total time=   3.7s\n",
      "[CV 1/5] END C=1e-05, penalty=l1, solver=liblinear;, score=0.406 total time=   0.0s\n",
      "[CV 2/5] END C=1e-05, penalty=l1, solver=liblinear;, score=0.406 total time=   0.0s\n",
      "[CV 3/5] END C=1e-05, penalty=l1, solver=liblinear;, score=0.406 total time=   0.0s\n",
      "[CV 4/5] END C=1e-05, penalty=l1, solver=liblinear;, score=0.406 total time=   0.0s\n",
      "[CV 5/5] END C=1e-05, penalty=l1, solver=liblinear;, score=0.406 total time=   0.0s\n",
      "[CV 1/5] END .....C=1e-05, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 2/5] END .....C=1e-05, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 3/5] END .....C=1e-05, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 4/5] END .....C=1e-05, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 5/5] END .....C=1e-05, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 1/5] END C=1e-05, penalty=l2, solver=liblinear;, score=0.744 total time=   0.0s\n",
      "[CV 2/5] END C=1e-05, penalty=l2, solver=liblinear;, score=0.733 total time=   0.0s\n",
      "[CV 3/5] END C=1e-05, penalty=l2, solver=liblinear;, score=0.739 total time=   0.0s\n",
      "[CV 4/5] END C=1e-05, penalty=l2, solver=liblinear;, score=0.740 total time=   0.0s\n",
      "[CV 5/5] END C=1e-05, penalty=l2, solver=liblinear;, score=0.733 total time=   0.0s\n",
      "[CV 1/5] END ...C=1e-05, penalty=l2, solver=sag;, score=0.713 total time=   2.3s\n",
      "[CV 2/5] END ...C=1e-05, penalty=l2, solver=sag;, score=0.745 total time=   2.7s\n",
      "[CV 3/5] END ...C=1e-05, penalty=l2, solver=sag;, score=0.713 total time=   2.2s\n",
      "[CV 4/5] END ...C=1e-05, penalty=l2, solver=sag;, score=0.646 total time=   1.7s\n",
      "[CV 5/5] END ...C=1e-05, penalty=l2, solver=sag;, score=0.720 total time=   2.2s\n",
      "[CV 1/5] END C=0.0001, penalty=l1, solver=liblinear;, score=0.406 total time=   0.0s\n",
      "[CV 2/5] END C=0.0001, penalty=l1, solver=liblinear;, score=0.406 total time=   0.0s\n",
      "[CV 3/5] END C=0.0001, penalty=l1, solver=liblinear;, score=0.406 total time=   0.0s\n",
      "[CV 4/5] END C=0.0001, penalty=l1, solver=liblinear;, score=0.406 total time=   0.0s\n",
      "[CV 5/5] END C=0.0001, penalty=l1, solver=liblinear;, score=0.406 total time=   0.0s\n",
      "[CV 1/5] END ....C=0.0001, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 2/5] END ....C=0.0001, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 3/5] END ....C=0.0001, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 4/5] END ....C=0.0001, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 5/5] END ....C=0.0001, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 1/5] END C=0.0001, penalty=l2, solver=liblinear;, score=0.750 total time=   0.0s\n",
      "[CV 2/5] END C=0.0001, penalty=l2, solver=liblinear;, score=0.745 total time=   0.0s\n",
      "[CV 3/5] END C=0.0001, penalty=l2, solver=liblinear;, score=0.746 total time=   0.0s\n",
      "[CV 4/5] END C=0.0001, penalty=l2, solver=liblinear;, score=0.748 total time=   0.0s\n",
      "[CV 5/5] END C=0.0001, penalty=l2, solver=liblinear;, score=0.737 total time=   0.0s\n",
      "[CV 1/5] END ..C=0.0001, penalty=l2, solver=sag;, score=0.732 total time=   0.7s\n",
      "[CV 2/5] END ..C=0.0001, penalty=l2, solver=sag;, score=0.729 total time=   0.6s\n",
      "[CV 3/5] END ..C=0.0001, penalty=l2, solver=sag;, score=0.746 total time=   0.7s\n",
      "[CV 4/5] END ..C=0.0001, penalty=l2, solver=sag;, score=0.749 total time=   0.7s\n",
      "[CV 5/5] END ..C=0.0001, penalty=l2, solver=sag;, score=0.740 total time=   0.7s\n",
      "[CV 1/5] END C=0.001, penalty=l1, solver=liblinear;, score=0.406 total time=   0.0s\n",
      "[CV 2/5] END C=0.001, penalty=l1, solver=liblinear;, score=0.406 total time=   0.0s\n",
      "[CV 3/5] END C=0.001, penalty=l1, solver=liblinear;, score=0.406 total time=   0.0s\n",
      "[CV 4/5] END C=0.001, penalty=l1, solver=liblinear;, score=0.406 total time=   0.0s\n",
      "[CV 5/5] END C=0.001, penalty=l1, solver=liblinear;, score=0.406 total time=   0.0s\n",
      "[CV 1/5] END .....C=0.001, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 2/5] END .....C=0.001, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 3/5] END .....C=0.001, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 4/5] END .....C=0.001, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 5/5] END .....C=0.001, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 1/5] END C=0.001, penalty=l2, solver=liblinear;, score=0.752 total time=   0.0s\n",
      "[CV 2/5] END C=0.001, penalty=l2, solver=liblinear;, score=0.743 total time=   0.0s\n",
      "[CV 3/5] END C=0.001, penalty=l2, solver=liblinear;, score=0.746 total time=   0.0s\n",
      "[CV 4/5] END C=0.001, penalty=l2, solver=liblinear;, score=0.751 total time=   0.0s\n",
      "[CV 5/5] END C=0.001, penalty=l2, solver=liblinear;, score=0.740 total time=   0.0s\n",
      "[CV 1/5] END ...C=0.001, penalty=l2, solver=sag;, score=0.748 total time=   0.2s\n",
      "[CV 2/5] END ...C=0.001, penalty=l2, solver=sag;, score=0.738 total time=   0.2s\n",
      "[CV 3/5] END ...C=0.001, penalty=l2, solver=sag;, score=0.742 total time=   0.2s\n",
      "[CV 4/5] END ...C=0.001, penalty=l2, solver=sag;, score=0.747 total time=   0.1s\n",
      "[CV 5/5] END ...C=0.001, penalty=l2, solver=sag;, score=0.741 total time=   0.1s\n",
      "[CV 1/5] END C=0.01, penalty=l1, solver=liblinear;, score=0.406 total time=   0.0s\n",
      "[CV 2/5] END C=0.01, penalty=l1, solver=liblinear;, score=0.406 total time=   0.0s\n",
      "[CV 3/5] END C=0.01, penalty=l1, solver=liblinear;, score=0.406 total time=   0.0s\n",
      "[CV 4/5] END C=0.01, penalty=l1, solver=liblinear;, score=0.406 total time=   0.0s\n",
      "[CV 5/5] END C=0.01, penalty=l1, solver=liblinear;, score=0.406 total time=   0.0s\n",
      "[CV 1/5] END ......C=0.01, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 2/5] END ......C=0.01, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 3/5] END ......C=0.01, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 4/5] END ......C=0.01, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 5/5] END ......C=0.01, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 1/5] END C=0.01, penalty=l2, solver=liblinear;, score=0.753 total time=   0.0s\n",
      "[CV 2/5] END C=0.01, penalty=l2, solver=liblinear;, score=0.746 total time=   0.0s\n",
      "[CV 3/5] END C=0.01, penalty=l2, solver=liblinear;, score=0.752 total time=   0.0s\n",
      "[CV 4/5] END C=0.01, penalty=l2, solver=liblinear;, score=0.754 total time=   0.0s\n",
      "[CV 5/5] END C=0.01, penalty=l2, solver=liblinear;, score=0.745 total time=   0.0s\n",
      "[CV 1/5] END ....C=0.01, penalty=l2, solver=sag;, score=0.753 total time=   0.1s\n",
      "[CV 2/5] END ....C=0.01, penalty=l2, solver=sag;, score=0.745 total time=   0.1s\n",
      "[CV 3/5] END ....C=0.01, penalty=l2, solver=sag;, score=0.752 total time=   0.1s\n",
      "[CV 4/5] END ....C=0.01, penalty=l2, solver=sag;, score=0.752 total time=   0.1s\n",
      "[CV 5/5] END ....C=0.01, penalty=l2, solver=sag;, score=0.744 total time=   0.1s\n",
      "[CV 1/5] END C=0.1, penalty=l1, solver=liblinear;, score=0.665 total time=   0.0s\n",
      "[CV 2/5] END C=0.1, penalty=l1, solver=liblinear;, score=0.647 total time=   0.0s\n",
      "[CV 3/5] END C=0.1, penalty=l1, solver=liblinear;, score=0.658 total time=   0.0s\n",
      "[CV 4/5] END C=0.1, penalty=l1, solver=liblinear;, score=0.660 total time=   0.0s\n",
      "[CV 5/5] END C=0.1, penalty=l1, solver=liblinear;, score=0.659 total time=   0.0s\n",
      "[CV 1/5] END .......C=0.1, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 2/5] END .......C=0.1, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 3/5] END .......C=0.1, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 4/5] END .......C=0.1, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 5/5] END .......C=0.1, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 1/5] END C=0.1, penalty=l2, solver=liblinear;, score=0.777 total time=   0.0s\n",
      "[CV 2/5] END C=0.1, penalty=l2, solver=liblinear;, score=0.781 total time=   0.0s\n",
      "[CV 3/5] END C=0.1, penalty=l2, solver=liblinear;, score=0.774 total time=   0.0s\n",
      "[CV 4/5] END C=0.1, penalty=l2, solver=liblinear;, score=0.774 total time=   0.0s\n",
      "[CV 5/5] END C=0.1, penalty=l2, solver=liblinear;, score=0.771 total time=   0.0s\n",
      "[CV 1/5] END .....C=0.1, penalty=l2, solver=sag;, score=0.777 total time=   0.1s\n",
      "[CV 2/5] END .....C=0.1, penalty=l2, solver=sag;, score=0.781 total time=   0.1s\n",
      "[CV 3/5] END .....C=0.1, penalty=l2, solver=sag;, score=0.774 total time=   0.1s\n",
      "[CV 4/5] END .....C=0.1, penalty=l2, solver=sag;, score=0.775 total time=   0.1s\n",
      "[CV 5/5] END .....C=0.1, penalty=l2, solver=sag;, score=0.771 total time=   0.1s\n",
      "[CV 1/5] END C=1.0, penalty=l1, solver=liblinear;, score=0.791 total time=   0.1s\n",
      "[CV 2/5] END C=1.0, penalty=l1, solver=liblinear;, score=0.785 total time=   0.1s\n",
      "[CV 3/5] END C=1.0, penalty=l1, solver=liblinear;, score=0.778 total time=   0.1s\n",
      "[CV 4/5] END C=1.0, penalty=l1, solver=liblinear;, score=0.777 total time=   0.4s\n",
      "[CV 5/5] END C=1.0, penalty=l1, solver=liblinear;, score=0.784 total time=   0.1s\n",
      "[CV 1/5] END .......C=1.0, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 2/5] END .......C=1.0, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 3/5] END .......C=1.0, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 4/5] END .......C=1.0, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 5/5] END .......C=1.0, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 1/5] END C=1.0, penalty=l2, solver=liblinear;, score=0.818 total time=   0.0s\n",
      "[CV 2/5] END C=1.0, penalty=l2, solver=liblinear;, score=0.810 total time=   0.0s\n",
      "[CV 3/5] END C=1.0, penalty=l2, solver=liblinear;, score=0.803 total time=   0.0s\n",
      "[CV 4/5] END C=1.0, penalty=l2, solver=liblinear;, score=0.800 total time=   0.0s\n",
      "[CV 5/5] END C=1.0, penalty=l2, solver=liblinear;, score=0.802 total time=   0.0s\n",
      "[CV 1/5] END .....C=1.0, penalty=l2, solver=sag;, score=0.818 total time=   0.1s\n",
      "[CV 2/5] END .....C=1.0, penalty=l2, solver=sag;, score=0.810 total time=   0.1s\n",
      "[CV 3/5] END .....C=1.0, penalty=l2, solver=sag;, score=0.803 total time=   0.1s\n",
      "[CV 4/5] END .....C=1.0, penalty=l2, solver=sag;, score=0.800 total time=   0.1s\n",
      "[CV 5/5] END .....C=1.0, penalty=l2, solver=sag;, score=0.802 total time=   0.1s\n",
      "[CV 1/5] END C=10.0, penalty=l1, solver=liblinear;, score=0.797 total time=   0.3s\n",
      "[CV 2/5] END C=10.0, penalty=l1, solver=liblinear;, score=0.792 total time=   0.3s\n",
      "[CV 3/5] END C=10.0, penalty=l1, solver=liblinear;, score=0.784 total time=   0.3s\n",
      "[CV 4/5] END C=10.0, penalty=l1, solver=liblinear;, score=0.776 total time=   0.3s\n",
      "[CV 5/5] END C=10.0, penalty=l1, solver=liblinear;, score=0.793 total time=   0.3s\n",
      "[CV 1/5] END ......C=10.0, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 2/5] END ......C=10.0, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 3/5] END ......C=10.0, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 4/5] END ......C=10.0, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 5/5] END ......C=10.0, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 1/5] END C=10.0, penalty=l2, solver=liblinear;, score=0.815 total time=   0.1s\n",
      "[CV 2/5] END C=10.0, penalty=l2, solver=liblinear;, score=0.811 total time=   0.1s\n",
      "[CV 3/5] END C=10.0, penalty=l2, solver=liblinear;, score=0.810 total time=   0.1s\n",
      "[CV 4/5] END C=10.0, penalty=l2, solver=liblinear;, score=0.798 total time=   0.1s\n",
      "[CV 5/5] END C=10.0, penalty=l2, solver=liblinear;, score=0.802 total time=   0.1s\n",
      "[CV 1/5] END ....C=10.0, penalty=l2, solver=sag;, score=0.815 total time=   0.2s\n",
      "[CV 2/5] END ....C=10.0, penalty=l2, solver=sag;, score=0.811 total time=   0.1s\n",
      "[CV 3/5] END ....C=10.0, penalty=l2, solver=sag;, score=0.810 total time=   0.1s\n",
      "[CV 4/5] END ....C=10.0, penalty=l2, solver=sag;, score=0.798 total time=   0.1s\n",
      "[CV 5/5] END ....C=10.0, penalty=l2, solver=sag;, score=0.802 total time=   0.1s\n",
      "[CV 1/5] END C=100.0, penalty=l1, solver=liblinear;, score=0.777 total time=   0.7s\n",
      "[CV 2/5] END C=100.0, penalty=l1, solver=liblinear;, score=0.776 total time=   0.6s\n",
      "[CV 3/5] END C=100.0, penalty=l1, solver=liblinear;, score=0.762 total time=   0.7s\n",
      "[CV 4/5] END C=100.0, penalty=l1, solver=liblinear;, score=0.757 total time=   0.6s\n",
      "[CV 5/5] END C=100.0, penalty=l1, solver=liblinear;, score=0.772 total time=   0.6s\n",
      "[CV 1/5] END .....C=100.0, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 2/5] END .....C=100.0, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 3/5] END .....C=100.0, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 4/5] END .....C=100.0, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 5/5] END .....C=100.0, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 1/5] END C=100.0, penalty=l2, solver=liblinear;, score=0.790 total time=   0.2s\n",
      "[CV 2/5] END C=100.0, penalty=l2, solver=liblinear;, score=0.792 total time=   0.2s\n",
      "[CV 3/5] END C=100.0, penalty=l2, solver=liblinear;, score=0.783 total time=   0.1s\n",
      "[CV 4/5] END C=100.0, penalty=l2, solver=liblinear;, score=0.778 total time=   0.2s\n",
      "[CV 5/5] END C=100.0, penalty=l2, solver=liblinear;, score=0.785 total time=   0.1s\n",
      "[CV 1/5] END ...C=100.0, penalty=l2, solver=sag;, score=0.791 total time=   0.7s\n",
      "[CV 2/5] END ...C=100.0, penalty=l2, solver=sag;, score=0.792 total time=   0.8s\n",
      "[CV 3/5] END ...C=100.0, penalty=l2, solver=sag;, score=0.783 total time=   0.7s\n",
      "[CV 4/5] END ...C=100.0, penalty=l2, solver=sag;, score=0.777 total time=   0.7s\n",
      "[CV 5/5] END ...C=100.0, penalty=l2, solver=sag;, score=0.785 total time=   0.7s\n",
      "[CV 1/5] END C=1000.0, penalty=l1, solver=liblinear;, score=0.765 total time=   1.3s\n",
      "[CV 2/5] END C=1000.0, penalty=l1, solver=liblinear;, score=0.769 total time=   1.2s\n",
      "[CV 3/5] END C=1000.0, penalty=l1, solver=liblinear;, score=0.761 total time=   1.4s\n",
      "[CV 4/5] END C=1000.0, penalty=l1, solver=liblinear;, score=0.754 total time=   1.1s\n",
      "[CV 5/5] END C=1000.0, penalty=l1, solver=liblinear;, score=0.766 total time=   1.0s\n",
      "[CV 1/5] END ....C=1000.0, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 2/5] END ....C=1000.0, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 3/5] END ....C=1000.0, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 4/5] END ....C=1000.0, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 5/5] END ....C=1000.0, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 1/5] END C=1000.0, penalty=l2, solver=liblinear;, score=0.778 total time=   0.3s\n",
      "[CV 2/5] END C=1000.0, penalty=l2, solver=liblinear;, score=0.777 total time=   0.3s\n",
      "[CV 3/5] END C=1000.0, penalty=l2, solver=liblinear;, score=0.764 total time=   0.3s\n",
      "[CV 4/5] END C=1000.0, penalty=l2, solver=liblinear;, score=0.760 total time=   0.3s\n",
      "[CV 5/5] END C=1000.0, penalty=l2, solver=liblinear;, score=0.772 total time=   0.3s\n",
      "[CV 1/5] END ..C=1000.0, penalty=l2, solver=sag;, score=0.779 total time=   2.3s\n",
      "[CV 2/5] END ..C=1000.0, penalty=l2, solver=sag;, score=0.777 total time=   2.3s\n",
      "[CV 3/5] END ..C=1000.0, penalty=l2, solver=sag;, score=0.767 total time=   2.1s\n",
      "[CV 4/5] END ..C=1000.0, penalty=l2, solver=sag;, score=0.762 total time=   2.3s\n",
      "[CV 5/5] END ..C=1000.0, penalty=l2, solver=sag;, score=0.773 total time=   2.2s\n",
      "[CV 1/5] END C=10000.0, penalty=l1, solver=liblinear;, score=0.758 total time=   1.4s\n",
      "[CV 2/5] END C=10000.0, penalty=l1, solver=liblinear;, score=0.758 total time=   0.8s\n",
      "[CV 3/5] END C=10000.0, penalty=l1, solver=liblinear;, score=0.753 total time=   1.7s\n",
      "[CV 4/5] END C=10000.0, penalty=l1, solver=liblinear;, score=0.744 total time=   1.4s\n",
      "[CV 5/5] END C=10000.0, penalty=l1, solver=liblinear;, score=0.754 total time=   0.8s\n",
      "[CV 1/5] END ...C=10000.0, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 2/5] END ...C=10000.0, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 3/5] END ...C=10000.0, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 4/5] END ...C=10000.0, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 5/5] END ...C=10000.0, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 1/5] END C=10000.0, penalty=l2, solver=liblinear;, score=0.767 total time=   0.5s\n",
      "[CV 2/5] END C=10000.0, penalty=l2, solver=liblinear;, score=0.766 total time=   0.6s\n",
      "[CV 3/5] END C=10000.0, penalty=l2, solver=liblinear;, score=0.754 total time=   0.5s\n",
      "[CV 4/5] END C=10000.0, penalty=l2, solver=liblinear;, score=0.752 total time=   0.6s\n",
      "[CV 5/5] END C=10000.0, penalty=l2, solver=liblinear;, score=0.764 total time=   0.5s\n",
      "[CV 1/5] END .C=10000.0, penalty=l2, solver=sag;, score=0.772 total time=   4.6s\n",
      "[CV 2/5] END .C=10000.0, penalty=l2, solver=sag;, score=0.774 total time=   4.7s\n",
      "[CV 3/5] END .C=10000.0, penalty=l2, solver=sag;, score=0.762 total time=   4.7s\n",
      "[CV 4/5] END .C=10000.0, penalty=l2, solver=sag;, score=0.755 total time=   5.3s\n",
      "[CV 5/5] END .C=10000.0, penalty=l2, solver=sag;, score=0.769 total time=   4.3s\n",
      "[CV 1/5] END C=100000.0, penalty=l1, solver=liblinear;, score=0.740 total time=   0.6s\n",
      "[CV 2/5] END C=100000.0, penalty=l1, solver=liblinear;, score=0.742 total time=   0.4s\n",
      "[CV 3/5] END C=100000.0, penalty=l1, solver=liblinear;, score=0.734 total time=   0.2s\n",
      "[CV 4/5] END C=100000.0, penalty=l1, solver=liblinear;, score=0.726 total time=   0.5s\n",
      "[CV 5/5] END C=100000.0, penalty=l1, solver=liblinear;, score=0.740 total time=   0.6s\n",
      "[CV 1/5] END ..C=100000.0, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 2/5] END ..C=100000.0, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 3/5] END ..C=100000.0, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 4/5] END ..C=100000.0, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 5/5] END ..C=100000.0, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 1/5] END C=100000.0, penalty=l2, solver=liblinear;, score=0.763 total time=   1.0s\n",
      "[CV 2/5] END C=100000.0, penalty=l2, solver=liblinear;, score=0.759 total time=   1.0s\n",
      "[CV 3/5] END C=100000.0, penalty=l2, solver=liblinear;, score=0.746 total time=   0.8s\n",
      "[CV 4/5] END C=100000.0, penalty=l2, solver=liblinear;, score=0.745 total time=   0.9s\n",
      "[CV 5/5] END C=100000.0, penalty=l2, solver=liblinear;, score=0.758 total time=   0.8s\n",
      "[CV 1/5] END C=100000.0, penalty=l2, solver=sag;, score=0.770 total time=   6.8s\n",
      "[CV 2/5] END C=100000.0, penalty=l2, solver=sag;, score=0.771 total time=   6.6s\n",
      "[CV 3/5] END C=100000.0, penalty=l2, solver=sag;, score=0.761 total time=   6.4s\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/priyadas/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_sag.py:352: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV 4/5] END C=100000.0, penalty=l2, solver=sag;, score=0.754 total time=   7.3s\n",
      "[CV 5/5] END C=100000.0, penalty=l2, solver=sag;, score=0.767 total time=   6.5s\n",
      "[CV 1/5] END C=1000000.0, penalty=l1, solver=liblinear;, score=0.739 total time=   0.2s\n",
      "[CV 2/5] END C=1000000.0, penalty=l1, solver=liblinear;, score=0.732 total time=   0.2s\n",
      "[CV 3/5] END C=1000000.0, penalty=l1, solver=liblinear;, score=0.729 total time=   0.3s\n",
      "[CV 4/5] END C=1000000.0, penalty=l1, solver=liblinear;, score=0.717 total time=   0.2s\n",
      "[CV 5/5] END C=1000000.0, penalty=l1, solver=liblinear;, score=0.727 total time=   0.2s\n",
      "[CV 1/5] END .C=1000000.0, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 2/5] END .C=1000000.0, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 3/5] END .C=1000000.0, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 4/5] END .C=1000000.0, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 5/5] END .C=1000000.0, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 1/5] END C=1000000.0, penalty=l2, solver=liblinear;, score=0.757 total time=   1.0s\n",
      "[CV 2/5] END C=1000000.0, penalty=l2, solver=liblinear;, score=0.752 total time=   1.0s\n",
      "[CV 3/5] END C=1000000.0, penalty=l2, solver=liblinear;, score=0.743 total time=   0.8s\n",
      "[CV 4/5] END C=1000000.0, penalty=l2, solver=liblinear;, score=0.739 total time=   1.0s\n",
      "[CV 5/5] END C=1000000.0, penalty=l2, solver=liblinear;, score=0.752 total time=   1.0s\n",
      "[CV 1/5] END C=1000000.0, penalty=l2, solver=sag;, score=0.771 total time=   7.1s\n",
      "[CV 2/5] END C=1000000.0, penalty=l2, solver=sag;, score=0.771 total time=   6.9s\n",
      "[CV 3/5] END C=1000000.0, penalty=l2, solver=sag;, score=0.760 total time=   6.9s\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/priyadas/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_sag.py:352: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV 4/5] END C=1000000.0, penalty=l2, solver=sag;, score=0.753 total time=   7.3s\n",
      "[CV 5/5] END C=1000000.0, penalty=l2, solver=sag;, score=0.768 total time=   6.8s\n",
      "[CV 1/5] END C=10000000.0, penalty=l1, solver=liblinear;, score=0.735 total time=   0.2s\n",
      "[CV 2/5] END C=10000000.0, penalty=l1, solver=liblinear;, score=0.726 total time=   0.3s\n",
      "[CV 3/5] END C=10000000.0, penalty=l1, solver=liblinear;, score=0.719 total time=   0.4s\n",
      "[CV 4/5] END C=10000000.0, penalty=l1, solver=liblinear;, score=0.714 total time=   0.3s\n",
      "[CV 5/5] END C=10000000.0, penalty=l1, solver=liblinear;, score=0.725 total time= 8.0min\n",
      "[CV 1/5] END C=10000000.0, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 2/5] END C=10000000.0, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 3/5] END C=10000000.0, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 4/5] END C=10000000.0, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 5/5] END C=10000000.0, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 1/5] END C=10000000.0, penalty=l2, solver=liblinear;, score=0.752 total time=   2.9s\n",
      "[CV 2/5] END C=10000000.0, penalty=l2, solver=liblinear;, score=0.747 total time=   0.9s\n",
      "[CV 3/5] END C=10000000.0, penalty=l2, solver=liblinear;, score=0.738 total time=   0.8s\n",
      "[CV 4/5] END C=10000000.0, penalty=l2, solver=liblinear;, score=0.734 total time=   0.8s\n",
      "[CV 5/5] END C=10000000.0, penalty=l2, solver=liblinear;, score=0.750 total time=   1.0s\n",
      "[CV 1/5] END C=10000000.0, penalty=l2, solver=sag;, score=0.770 total time=   7.3s\n",
      "[CV 2/5] END C=10000000.0, penalty=l2, solver=sag;, score=0.770 total time=   7.0s\n",
      "[CV 3/5] END C=10000000.0, penalty=l2, solver=sag;, score=0.760 total time=   6.7s\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/priyadas/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_sag.py:352: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV 4/5] END C=10000000.0, penalty=l2, solver=sag;, score=0.752 total time=   7.1s\n",
      "[CV 5/5] END C=10000000.0, penalty=l2, solver=sag;, score=0.767 total time=   6.9s\n",
      "[CV 1/5] END C=100000000.0, penalty=l1, solver=liblinear;, score=0.728 total time=   0.6s\n",
      "[CV 2/5] END C=100000000.0, penalty=l1, solver=liblinear;, score=0.722 total time=   0.2s\n",
      "[CV 3/5] END C=100000000.0, penalty=l1, solver=liblinear;, score=0.712 total time=   0.2s\n",
      "[CV 4/5] END C=100000000.0, penalty=l1, solver=liblinear;, score=0.706 total time=   0.4s\n",
      "[CV 5/5] END C=100000000.0, penalty=l1, solver=liblinear;, score=0.718 total time=   0.2s\n",
      "[CV 1/5] END C=100000000.0, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 2/5] END C=100000000.0, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 3/5] END C=100000000.0, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 4/5] END C=100000000.0, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 5/5] END C=100000000.0, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 1/5] END C=100000000.0, penalty=l2, solver=liblinear;, score=0.753 total time=   0.8s\n",
      "[CV 2/5] END C=100000000.0, penalty=l2, solver=liblinear;, score=0.746 total time=   0.9s\n",
      "[CV 3/5] END C=100000000.0, penalty=l2, solver=liblinear;, score=0.737 total time=   0.8s\n",
      "[CV 4/5] END C=100000000.0, penalty=l2, solver=liblinear;, score=0.733 total time=   0.8s\n",
      "[CV 5/5] END C=100000000.0, penalty=l2, solver=liblinear;, score=0.750 total time=   0.8s\n",
      "[CV 1/5] END C=100000000.0, penalty=l2, solver=sag;, score=0.771 total time=   7.2s\n",
      "[CV 2/5] END C=100000000.0, penalty=l2, solver=sag;, score=0.771 total time=   6.9s\n",
      "[CV 3/5] END C=100000000.0, penalty=l2, solver=sag;, score=0.759 total time=   6.8s\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/priyadas/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_sag.py:352: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV 4/5] END C=100000000.0, penalty=l2, solver=sag;, score=0.752 total time=   7.4s\n",
      "[CV 5/5] END C=100000000.0, penalty=l2, solver=sag;, score=0.766 total time=   6.9s\n",
      "[CV 1/5] END C=1000000000.0, penalty=l1, solver=liblinear;, score=0.724 total time=   0.5s\n",
      "[CV 2/5] END C=1000000000.0, penalty=l1, solver=liblinear;, score=0.719 total time=   0.3s\n",
      "[CV 3/5] END C=1000000000.0, penalty=l1, solver=liblinear;, score=0.709 total time=   0.2s\n",
      "[CV 4/5] END C=1000000000.0, penalty=l1, solver=liblinear;, score=0.704 total time=   0.4s\n",
      "[CV 5/5] END C=1000000000.0, penalty=l1, solver=liblinear;, score=0.716 total time=   0.2s\n",
      "[CV 1/5] END C=1000000000.0, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 2/5] END C=1000000000.0, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 3/5] END C=1000000000.0, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 4/5] END C=1000000000.0, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 5/5] END C=1000000000.0, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 1/5] END C=1000000000.0, penalty=l2, solver=liblinear;, score=0.752 total time=   1.1s\n",
      "[CV 2/5] END C=1000000000.0, penalty=l2, solver=liblinear;, score=0.746 total time=   0.9s\n",
      "[CV 3/5] END C=1000000000.0, penalty=l2, solver=liblinear;, score=0.736 total time=   0.9s\n",
      "[CV 4/5] END C=1000000000.0, penalty=l2, solver=liblinear;, score=0.733 total time=   0.8s\n",
      "[CV 5/5] END C=1000000000.0, penalty=l2, solver=liblinear;, score=0.750 total time=   0.8s\n",
      "[CV 1/5] END C=1000000000.0, penalty=l2, solver=sag;, score=0.771 total time=   7.3s\n",
      "[CV 2/5] END C=1000000000.0, penalty=l2, solver=sag;, score=0.770 total time=   7.1s\n",
      "[CV 3/5] END C=1000000000.0, penalty=l2, solver=sag;, score=0.760 total time=   6.8s\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/priyadas/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_sag.py:352: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV 4/5] END C=1000000000.0, penalty=l2, solver=sag;, score=0.752 total time=   7.2s\n",
      "[CV 5/5] END C=1000000000.0, penalty=l2, solver=sag;, score=0.767 total time=   7.0s\n",
      "[CV 1/5] END C=10000000000.0, penalty=l1, solver=liblinear;, score=0.720 total time=   0.3s\n",
      "[CV 2/5] END C=10000000000.0, penalty=l1, solver=liblinear;, score=0.718 total time=   0.3s\n",
      "[CV 3/5] END C=10000000000.0, penalty=l1, solver=liblinear;, score=0.708 total time=   0.3s\n",
      "[CV 4/5] END C=10000000000.0, penalty=l1, solver=liblinear;, score=0.706 total time=   0.3s\n",
      "[CV 5/5] END C=10000000000.0, penalty=l1, solver=liblinear;, score=0.713 total time=   0.4s\n",
      "[CV 1/5] END C=10000000000.0, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 2/5] END C=10000000000.0, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 3/5] END C=10000000000.0, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 4/5] END C=10000000000.0, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 5/5] END C=10000000000.0, penalty=l1, solver=sag;, score=nan total time=   0.0s\n",
      "[CV 1/5] END C=10000000000.0, penalty=l2, solver=liblinear;, score=0.754 total time=   1.0s\n",
      "[CV 2/5] END C=10000000000.0, penalty=l2, solver=liblinear;, score=0.744 total time=   0.9s\n",
      "[CV 3/5] END C=10000000000.0, penalty=l2, solver=liblinear;, score=0.736 total time=   0.8s\n",
      "[CV 4/5] END C=10000000000.0, penalty=l2, solver=liblinear;, score=0.733 total time=   0.8s\n",
      "[CV 5/5] END C=10000000000.0, penalty=l2, solver=liblinear;, score=0.750 total time=   0.9s\n",
      "[CV 1/5] END C=10000000000.0, penalty=l2, solver=sag;, score=0.770 total time=   7.3s\n",
      "[CV 2/5] END C=10000000000.0, penalty=l2, solver=sag;, score=0.770 total time=   7.0s\n",
      "[CV 3/5] END C=10000000000.0, penalty=l2, solver=sag;, score=0.761 total time=   6.8s\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/priyadas/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_sag.py:352: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV 4/5] END C=10000000000.0, penalty=l2, solver=sag;, score=0.754 total time=   7.3s\n",
      "[CV 5/5] END C=10000000000.0, penalty=l2, solver=sag;, score=0.767 total time=   6.9s\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/priyadas/opt/anaconda3/lib/python3.9/site-packages/sklearn/model_selection/_validation.py:372: FitFailedWarning: \n",
      "105 fits failed out of a total of 420.\n",
      "The score on these train-test partitions for these parameters will be set to nan.\n",
      "If these failures are not expected, you can try to debug them by setting error_score='raise'.\n",
      "\n",
      "Below are more details about the failures:\n",
      "--------------------------------------------------------------------------------\n",
      "105 fits failed with the following error:\n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/priyadas/opt/anaconda3/lib/python3.9/site-packages/sklearn/model_selection/_validation.py\", line 680, in _fit_and_score\n",
      "    estimator.fit(X_train, y_train, **fit_params)\n",
      "  File \"/Users/priyadas/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py\", line 1461, in fit\n",
      "    solver = _check_solver(self.solver, self.penalty, self.dual)\n",
      "  File \"/Users/priyadas/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py\", line 447, in _check_solver\n",
      "    raise ValueError(\n",
      "ValueError: Solver sag supports only 'l2' or 'none' penalties, got l1 penalty.\n",
      "\n",
      "  warnings.warn(some_fits_failed_message, FitFailedWarning)\n",
      "/Users/priyadas/opt/anaconda3/lib/python3.9/site-packages/sklearn/model_selection/_search.py:969: UserWarning: One or more of the test scores are non-finite: [0.40592864        nan 0.73416851 0.55643605 0.40592864        nan\n",
      " 0.73416851 0.51883455 0.40592864        nan 0.73416851 0.48116545\n",
      " 0.40592864        nan 0.73416851 0.51880075 0.40592864        nan\n",
      " 0.73466812 0.50622914 0.40592864        nan 0.73766581 0.70739885\n",
      " 0.40592864        nan 0.74524301 0.73941467 0.40592864        nan\n",
      " 0.74632555 0.74307829 0.40592864        nan 0.74982284 0.74903179\n",
      " 0.65797915        nan 0.77546923 0.77551087 0.78313007        nan\n",
      " 0.80652797 0.80661123 0.7885426         nan 0.80740227 0.8074439\n",
      " 0.76872488        nan 0.78541984 0.7855031  0.76293781        nan\n",
      " 0.77034856 0.77147263 0.75336194        nan 0.76068959 0.76647665\n",
      " 0.73654206        nan 0.75419474 0.76476964 0.72883958        nan\n",
      " 0.74849093 0.76439499 0.72392693        nan 0.74432764 0.76368722\n",
      " 0.71714064        nan 0.74395295 0.76368719 0.71443449        nan\n",
      " 0.74345336 0.76406192 0.7129356         nan 0.743495   0.76447824]\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=5,\n",
       "             estimator=LogisticRegression(class_weight='balanced',\n",
       "                                          max_iter=2000),\n",
       "             param_grid={'C': array([1.e-10, 1.e-09, 1.e-08, 1.e-07, 1.e-06, 1.e-05, 1.e-04, 1.e-03,\n",
       "       1.e-02, 1.e-01, 1.e+00, 1.e+01, 1.e+02, 1.e+03, 1.e+04, 1.e+05,\n",
       "       1.e+06, 1.e+07, 1.e+08, 1.e+09, 1.e+10]),\n",
       "                         'penalty': ['l1', 'l2'],\n",
       "                         'solver': ['liblinear', 'sag']},\n",
       "             scoring='accuracy', verbose=3)"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lr_model.fit(X_train_vectors_tfidf,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "d1f534e9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LogisticRegression(C=10.0, class_weight='balanced', max_iter=2000, solver='sag')"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lr_model.best_estimator_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "485afd84",
   "metadata": {},
   "outputs": [],
   "source": [
    "lr_predict = lr_model.predict(X_test_vectors_tfidf)\n",
    "y_lr_prob = lr_model.predict_proba(X_test_vectors_tfidf)[:,1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "f21f46ca",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.77      0.80      0.78      2438\n",
      "           1       0.86      0.83      0.85      3567\n",
      "\n",
      "    accuracy                           0.82      6005\n",
      "   macro avg       0.81      0.82      0.81      6005\n",
      "weighted avg       0.82      0.82      0.82      6005\n",
      "\n",
      "Confusion Matrix:\n",
      " [[1952  486]\n",
      " [ 596 2971]]\n",
      "\n",
      "AUC: 0.8880863870871745\n"
     ]
    }
   ],
   "source": [
    "print(classification_report(y_test,lr_predict))\n",
    "print('Confusion Matrix:\\n',confusion_matrix(y_test, lr_predict))\n",
    " \n",
    "fpr, tpr, thresholds = roc_curve(y_test, y_lr_prob)\n",
    "roc_auc = auc(fpr, tpr)\n",
    "print('\\nAUC:', roc_auc)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "04734534",
   "metadata": {},
   "source": [
    "### Conclusions"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fbfe3465",
   "metadata": {},
   "source": [
    "A model is built for editor classified twitter data using NLP pipeline, with tweet text as the feature and editor classification as the target variable. After initial data exploration, the data is cleaned and vectotrized using count and TFIDF vectorizers. A baseline model is built using Logistic Regression and the two vectorizers are compared. Based on the results, TFIDF vectorizer is chosen for further analysis. Apart from accuracy, performance metrics such as precision, recall, confusion matrix and AUC are used to evaluate the results. The affect of factors such as stopwords, n-grams, stemming and lemmatization on the performance of the baseline model are studied. In the next step, two alternative models, Random forest classifier and Extrement gradient boosting models are built to classify the data. Based on all the performance metrics, it is concluded that the baseline model, Logist Regression has the best results and is chosen as the model of choice. To futher improve the Logist Regression model, hyperparameter tuning using GridsearchCV is performed. However, the gridsearch CV does not improve on the model performance by much.  \n",
    "\n",
    "In this analysis, text from the tweets is used, as an extension to this project, adding other features such as 'username' and/or 'hashtags' to improve uppn the model performance. \n",
    "\n",
    "The model is built in this project to mimic the classfication of the editors, any errors by the editors will also be reflected in the model performance. As a next step, a model can be built to classify the data based on the categories and not editor inputs. This will circumvent some of the human errors during the classification process. It will be intersting to see how this model compares with the present (editor based) model."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
